def generate_playfair_key_matrix(key):
    key = key.upper().replace("J", "I")
    key_matrix = []
    used_chars = set()

    for char in key:
        if char not in used_chars and char.isalpha():
            key_matrix.append(char)
            used_chars.add(char)

    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in used_chars:
            key_matrix.append(char)
            used_chars.add(char)

    return [key_matrix[i * 5:(i + 1) * 5] for i in range(5)]

def find_position(matrix, char):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None

def playfair_transform_pair(matrix, pair, encrypt=True):
    row1, col1 = find_position(matrix, pair[0])
    row2, col2 = find_position(matrix, pair[1])

    if row1 == row2:
        col1 = (col1 + 1) % 5 if encrypt else (col1 - 1) % 5
        col2 = (col2 + 1) % 5 if encrypt else (col2 - 1) % 5
    elif col1 == col2:
        row1 = (row1 + 1) % 5 if encrypt else (row1 - 1) % 5
        row2 = (row2 + 1) % 5 if encrypt else (row2 - 1) % 5
    else:
        col1, col2 = col2, col1

    return matrix[row1][col1] + matrix[row2][col2]

def prepare_playfair_message(message):
    message = message.upper().replace("J", "I").replace(" ", "")
    prepared_message = []
    i = 0

    while i < len(message):
        char1 = message[i]
        char2 = message[i + 1] if i + 1 < len(message) else 'X'
        if char1 == char2:
            prepared_message.append(char1 + 'X')
            i += 1
        else:
            prepared_message.append(char1 + char2)
            i += 2

    if len(prepared_message[-1]) == 1:
        prepared_message[-1] += 'X'

    return prepared_message

def playfair_cipher(message, key_matrix, encrypt=True):
    prepared_message = prepare_playfair_message(message)
    result = ""

    for pair in prepared_message:
        result += playfair_transform_pair(key_matrix, pair, encrypt)

    return result

# Your full name
full_name = "NURINSHRESTHA"  # Replace with your full name in uppercase

# Key for the Playfair Cipher
key = "KEYWORD"  # Replace with your desired key

# Generate Playfair key matrix
key_matrix = generate_playfair_key_matrix(key)

# Encrypt the full name
encrypted_name = playfair_cipher(full_name, key_matrix, encrypt=True)
# Decrypt the full name
decrypted_name = playfair_cipher(encrypted_name, key_matrix, encrypt=False)

print(f"Original Name: {full_name}")
print(f"Encrypted Name: {encrypted_name}")
print(f"Decrypted Name: {decrypted_name}")
