import numpy as np

def mod_inverse(matrix, modulus):
    determinant = int(np.round(np.linalg.det(matrix)))
    determinant_inv = pow(determinant, -1, modulus)
    matrix_inv = (
        determinant_inv * np.round(determinant * np.linalg.inv(matrix)).astype(int) % modulus
    )
    return matrix_inv

def hill_cipher_block(message_block, key_matrix, encrypt=True):
    message_vector = np.array([ord(char) - ord('A') for char in message_block])
    if not encrypt:
        key_matrix = mod_inverse(key_matrix, 26)
    result_vector = np.dot(key_matrix, message_vector) % 26
    result_message = ''.join(chr(int(num) + ord('A')) for num in result_vector)
    return result_message

def prepare_message(message, block_size):
    message = message.upper().replace(" ", "")
    while len(message) % block_size != 0:
        message += 'X'
    return message

# Your full name
full_name = "NURINSHRESTHA"  # Replace with your full name in uppercase without spaces
block_size = 3  # Block size for Hill Cipher (3x3 matrix)

# Example key matrix (3x3)
key_matrix = np.array([[6, 24, 1], 
                       [13, 16, 10], 
                       [20, 17, 15]])

# Prepare the message by padding if necessary
prepared_message = prepare_message(full_name, block_size)

# Encrypt and Decrypt
encrypted_name = ""
decrypted_name = ""
for i in range(0, len(prepared_message), block_size):
    block = prepared_message[i:i + block_size]
    encrypted_block = hill_cipher_block(block, key_matrix, encrypt=True)
    encrypted_name += encrypted_block
    decrypted_block = hill_cipher_block(encrypted_block, key_matrix, encrypt=False)
    decrypted_name += decrypted_block

print(f"Original Name: {full_name}")
print(f"Prepared Message: {prepared_message}")
print(f"Encrypted Name: {encrypted_name}")
print(f"Decrypted Name: {decrypted_name}")
